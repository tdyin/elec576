# -*- coding: utf-8 -*-
"""Assignment_1_Pytorch_MNIST.ipynb

Automatically generated by Colaboratory.

Overall structure:

1) Set Pytorch metadata
- seed
- tensorflow output
- whether to transfer to gpu (cuda)

2) Import data
- download data
- create data loaders with batch size, transforms, scaling

3) Define Model architecture, loss and optimizer

4) Define Test and Training loop
    - Train:
        a. get next batch
        b. forward pass through model
        c. calculate loss
        d. backward pass from loss (calculates the gradient for each parameter)
        e. optimizer: performs weight updates

5) Perform Training over multiple epochs:
    Each epoch:
    - call train loop
    - call test loop

Acknowledgments:https://github.com/motokimura/pytorch_tensorboard/blob/master/main.py
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms

from torch.utils.tensorboard import SummaryWriter
from datetime import datetime

batch_size = 64
test_batch_size = 1000
epochs = 10
lr = 0.01
try_cuda = True
seed = 1000
logging_interval = 10  # how many batches to wait before logging
logging_dir = None

# 1) setting up the logging
# [inset-code: set up logging]
if logging_dir is None:
    logging_dir = f'runs/mnist_{datetime.now().strftime("%Y%m%d-%H%M%S")}'
writer = SummaryWriter(logging_dir)

# deciding whether to send to the cpu or not if available
if torch.cuda.is_available() and try_cuda:
    cuda = True
    torch.cuda.manual_seed(seed)
else:
    cuda = False
    torch.manual_seed(seed)

# Setting up data
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

# train_loader = [inset-code]
train_loader = torch.utils.data.DataLoader(
    datasets.MNIST('./data', train=True, download=True, transform=transform),
    batch_size=batch_size, shuffle=True)

# test_loader = [inset-code]
test_loader = torch.utils.data.DataLoader(
    datasets.MNIST('./data', train=False, transform=transform),
    batch_size=test_batch_size, shuffle=False)


# Defining Architecture,loss and optimizer
# conv1(5-5-1-32)
# ReLU
# maxpool(2-2)
# conv2(5-5-32-64)
# ReLU
# maxpool(2-2)
# fc(1024)
# ReLU
# DropOut(0.5)
# Softmax(10)

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=5)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5)
        self.conv2_drop = nn.Dropout2d(p=0.5)
        self.fc1 = nn.Linear(1024, 1024)
        self.fc2 = nn.Linear(1024, 10)

        # For storing intermediate activations
        self.intermediate_activations = {}

    def forward(self, x, store_activations=False):
        # Conv1 layer
        conv1_out = self.conv1(x)
        if store_activations:
            self.intermediate_activations['conv1_net_input'] = conv1_out.detach()

        conv1_relu = F.relu(conv1_out)
        if store_activations:
            self.intermediate_activations['conv1_after_relu'] = conv1_relu.detach()

        conv1_pool = F.max_pool2d(conv1_relu, 2)
        if store_activations:
            self.intermediate_activations['conv1_after_maxpool'] = conv1_pool.detach()

        # Conv2 layer
        conv2_out = self.conv2(self.conv2_drop(conv1_pool))
        if store_activations:
            self.intermediate_activations['conv2_net_input'] = conv2_out.detach()

        conv2_relu = F.relu(conv2_out)
        if store_activations:
            self.intermediate_activations['conv2_after_relu'] = conv2_relu.detach()

        conv2_pool = F.max_pool2d(conv2_relu, 2)
        if store_activations:
            self.intermediate_activations['conv2_after_maxpool'] = conv2_pool.detach()

        # Flatten
        x = conv2_pool.view(-1, 1024)

        # FC1 layer
        fc1_out = self.fc1(x)
        if store_activations:
            self.intermediate_activations['fc1_net_input'] = fc1_out.detach()

        fc1_relu = F.relu(fc1_out)
        if store_activations:
            self.intermediate_activations['fc1_after_relu'] = fc1_relu.detach()

        fc1_dropout = F.dropout(fc1_relu, p=0.5, training=self.training)

        # FC2 layer (output)
        fc2_out = self.fc2(fc1_dropout)
        if store_activations:
            self.intermediate_activations['fc2_net_input'] = fc2_out.detach()

        x = F.softmax(fc2_out, dim=1)

        return x


# [inset-code: instantiate model]
model = Net()
if cuda:
    model.cuda()

# optimizer = [inset-code: USE AN ADAM OPTIMIZER]
optimizer = optim.Adam(model.parameters(), lr=lr)

# Defining the test and training loops
eps = 1e-13


def log_detailed_statistics(model, writer, iteration):
    """Log detailed statistics for weights, biases, and activations"""
    # Log weights and biases statistics
    for name, param in model.named_parameters():
        param_cpu = param.detach().cpu()
        layer_name = name.replace('.', '/')

        # Log histogram
        writer.add_histogram(f'parameters/{layer_name}/histogram', param_cpu, iteration)

        # Log scalar statistics
        writer.add_scalar(f'parameters/{layer_name}/min', param_cpu.min().item(), iteration)
        writer.add_scalar(f'parameters/{layer_name}/max', param_cpu.max().item(), iteration)
        writer.add_scalar(f'parameters/{layer_name}/mean', param_cpu.mean().item(), iteration)
        writer.add_scalar(f'parameters/{layer_name}/std', param_cpu.std().item(), iteration)

    # Log activations statistics
    for act_name, activation in model.intermediate_activations.items():
        act_cpu = activation.cpu()

        # Log histogram
        writer.add_histogram(f'activations/{act_name}/histogram', act_cpu, iteration)

        # Log scalar statistics
        writer.add_scalar(f'activations/{act_name}/min', act_cpu.min().item(), iteration)
        writer.add_scalar(f'activations/{act_name}/max', act_cpu.max().item(), iteration)
        writer.add_scalar(f'activations/{act_name}/mean', act_cpu.mean().item(), iteration)
        writer.add_scalar(f'activations/{act_name}/std', act_cpu.std().item(), iteration)


def train(epoch):
    model.train()

    # criterion = nn.CrossEntropyLoss()
    # criterion = [inset-code]
    criterion = nn.NLLLoss()

    global_iteration = 0

    for batch_idx, (data, target) in enumerate(train_loader):
        if cuda:
            data, target = data.cuda(), target.cuda()

        # Calculate global iteration number
        global_iteration = (epoch - 1) * len(train_loader) + batch_idx

        # optimizer.[inset-code]
        optimizer.zero_grad()

        # Forward pass with activation storage every 100 iterations
        store_activations = (global_iteration % 100 == 0)
        output = model(data, store_activations=store_activations)

        loss = criterion(torch.log(output + eps), target)  # = sum_k(-t_k * log(y_k))
        # loss[inset-code]
        loss.backward()
        # optimizer[inset-code]
        optimizer.step()

        # Log detailed statistics every 100 iterations
        if global_iteration % 100 == 0:
            log_detailed_statistics(model, writer, global_iteration)
            print(f'[Iteration {global_iteration}] Logged detailed statistics')

        if batch_idx % logging_interval == 0:
            # [inset-code: print and log the performance]
            print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} '
                  f'({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}')
            writer.add_scalar('train/loss', loss.item(), global_iteration)


def test(epoch):
    model.eval()
    test_loss = 0
    correct = 0
    # criterion = nn.CrossEntropyLoss()

    # criterion = nn.CrossEntropyLoss(size_average = False)
    criterion = nn.NLLLoss(size_average=False)

    for data, target in test_loader:
        if cuda:
            data, target = data.cuda(), target.cuda()

        output = model(data)

        test_loss += criterion(torch.log(output + eps),
                               target, ).item()  # sum up batch loss (later, averaged over all test samples)
        # pred = [inset-code] # get the index of the max log-probability
        pred = output.data.max(1, keepdim=True)[1]  # get the index of the max log-probability
        # correct += [inset-code]
        correct += pred.eq(target.data.view_as(pred)).cpu().sum().item()

    test_loss /= len(test_loader.dataset)
    test_accuracy = 100. * correct / len(test_loader.dataset)
    # [inset-code: print the performance]
    print(f'\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{len(test_loader.dataset)} '
          f'({test_accuracy:.0f}%)\n')

    # Log test/loss and test/accuracy to TensorBoard at every epoch
    n_iter = epoch * len(train_loader)
    # [inset-code: log the performance]
    writer.add_scalar('test/loss', test_loss, n_iter)
    writer.add_scalar('test/accuracy', test_accuracy, n_iter)


# Training loop

# [inset-code: running test and training over epoch]
for epoch in range(1, epochs + 1):
    train(epoch)
    test(epoch)

writer.close()

# Commented out IPython magic to ensure Python compatibility.
"""
#https://stackoverflow.com/questions/55970686/tensorboard-not-found-as-magic-function-in-jupyter

#seems to be working in firefox when not working in Google Chrome when running in Colab
#https://stackoverflow.com/questions/64218755/getting-error-403-in-google-colab-with-tensorboard-with-firefox


# %load_ext tensorboard
# %tensorboard --logdir [dir]

"""
